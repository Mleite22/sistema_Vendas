unit uTelaHeranca;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.DBCtrls, Vcl.Grids,
  Vcl.DBGrids, Vcl.StdCtrls, Vcl.Buttons, Vcl.Mask, Vcl.ComCtrls, Vcl.ExtCtrls,
  uDTMConexao, ZAbstractRODataset, ZAbstractDataset, ZDataset, uEnum;

type
  TfrmTelaHeranca = class(TForm)
    pnlRodape: TPanel;
    btnNovo: TBitBtn;
    btnAlterar: TBitBtn;
    btnCancelar: TBitBtn;
    btnGravar: TBitBtn;
    btnApagar: TBitBtn;
    btnFechar: TBitBtn;
    btnNavigator: TDBNavigator;
    qryListagem: TZQuery;
    dtsListagem: TDataSource;
    pgcPrincipal: TPageControl;
    tabListagem: TTabSheet;
    tabManutencao: TTabSheet;
    pnlListagemTop: TPanel;
    mskPesquisar: TMaskEdit;
    btnPesquisar: TBitBtn;
    grdListagem: TDBGrid;
    lblIndice: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnApagarClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure grdListagemTitleClick(Column: TColumn);
    procedure mskPesquisarChange(Sender: TObject);
    procedure grdListagemDblClick(Sender: TObject);

  private
    { Private declarations }


    procedure ControlarBotoes(btnNovo, btnAlterar, btnCancelar,
                              btnGravar, btnApagar: TBitBtn;
                              Navegador: TDBNavigator;
                              pgcPrincipal: TPageControl; Flag: Boolean);
                              //indice Tab
    procedure ControlarIndiceTab(pgcPrincipal: TPageControl; indice: Integer);

    function RetornarCampoTraduzido(Campo: String): String;

    procedure ExibirLabelIndice(Campo: String; aLabel: TLabel);

    function ExisteCampoObrigatorio: Boolean;
    procedure DesabilitarEditPK;
    procedure LimparEdits;

  public
    { Public declarations }

    EstadoDoCadastro: TEstadoDoCadastro;

    IndiceAtual : string;
    function Apagar: Boolean; virtual;
    function Gravar (EstadoDoCadastro: TEstadoDoCadastro): Boolean; virtual;

  end;

var
  frmTelaHeranca: TfrmTelaHeranca;

implementation  //Corpo da CLASSE

{$R *.dfm}

{$region 'OBSERVAÇÕES'}

{
TAG: 1 - Chave Primária - PK
TAG: 2 - Campos Obrigatórios
}

{$endregion}
                      //Instaciando os Botões e controle de tela
procedure TfrmTelaHeranca.ControlarBotoes(btnNovo, btnAlterar, btnCancelar,
                                          btnGravar, btnApagar: TBitBtn;
                                          Navegador: TDBNavigator;
                                          pgcPrincipal: TPageControl; Flag: Boolean);
begin
   btnNovo.Enabled    :=     Flag;
   btnApagar.Enabled  :=     Flag;
   btnAlterar.Enabled :=     Flag;
   Navegador.Enabled  :=     Flag;
   pgcPrincipal.Pages[1].TabVisible :=     Flag;
   btnCancelar.Enabled:= not(Flag);
   btnGravar.Enabled  := not (Flag);
end;
                       //Indice Tab
procedure TfrmTelaHeranca.ControlarIndiceTab( pgcPrincipal: TPageControl; indice: Integer);
begin
    if (pgcPrincipal.Pages [indice].TabVisible) then
        pgcPrincipal.TabIndex := indice;

end;

{$region 'FUNÇÕES E PROCEDURES'}



function TfrmTelaHeranca.RetornarCampoTraduzido(Campo: String) : String;
var i : Integer;
begin
  for I := 0 to qryListagem.Fields.Count-1 do
  begin
     if LowerCase (qryListagem.Fields[i].FieldName) = LowerCase (Campo) then
     begin
       Result := qryListagem.Fields[i].DisplayLabel;
       break;
     end;
  end;

end;

function TfrmTelaHeranca.ExisteCampoObrigatorio: Boolean;

var i: Integer;
begin
   Result := False;
   for I := 0 to ComponentCount -1 do
   begin
     if (Components[i] is TLabeledEdit) then
      begin
        if (TLabeledEdit(Components[i]).Tag = 2) and
           (TLabeledEdit(Components[i]).Text= '') then
           begin
              MessageDlg(TLabeledEdit(Components[i]).EditLabel.Caption +
                          ' é um campo obrigatório',mtInformation, [mbOK], 0);
              TLabeledEdit(Components[i]).SetFocus;
              Result := True;
              Break;
           end;

      end;
   end;

end;

procedure TfrmTelaHeranca.DesabilitarEditPK;
var i: Integer;
begin
   for I := 0 to ComponentCount -1 do
   begin
     if (Components[i] is TLabeledEdit) then
      begin
        if (TLabeledEdit(Components[i]).Tag = 1) then
        begin
            TLabeledEdit(Components[i]).Enabled:= False;
            Break;
        end;
      end;
   end;
end;

procedure TfrmTelaHeranca.LimparEdits;
var i: Integer;
begin
   for I := 0 to ComponentCount -1 do
   begin
     if (Components[i] is TLabeledEdit) then
         TLabeledEdit(Components[i]).Text:= ''
     else if (Components[i] is TEdit) then
           TEdit(Components[i]).Text:= '';
   end;
end;


{$endregion}

{$region 'MÉDTODOS VIRTUAIS'}

function TfrmTelaHeranca.Apagar: Boolean;
begin
  ShowMessage('DELETADO');
  Result:= True;
end;

function TfrmTelaHeranca.Gravar(EstadoDoCadastro:TEstadoDoCadastro):Boolean;
begin
  if (EstadoDoCadastro = ecInserir) then
      ShowMessage('INSERIDO COM SUCESSO!')
  else if (EstadoDoCadastro = ecAlterado) then
      ShowMessage('ALTERADO COM SUCESSO!');
  Result := True;

end;

{$endregion}

procedure TfrmTelaHeranca.ExibirLabelIndice(Campo: String; aLabel: TLabel);
begin
  aLabel.Caption := RetornarCampoTraduzido (Campo);
end;

{$region 'BOTÕES'}

                      //BOTÃO NOVO
procedure TfrmTelaHeranca.btnNovoClick(Sender: TObject);
begin
    ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar, btnApagar,
                    btnNavigator, pgcPrincipal, false);
    EstadoDoCadastro:= ecInserir;
    LimparEdits;
end;

                    // BOTÃO ALTERAR
procedure TfrmTelaHeranca.btnAlterarClick(Sender: TObject);
begin
    ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar, btnApagar,
                    btnNavigator, pgcPrincipal, false);
    EstadoDoCadastro := ecAlterado;
end;

                       //Botão CANCELAR
procedure TfrmTelaHeranca.btnCancelarClick(Sender: TObject);
begin
    ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar, btnApagar,
                    btnNavigator, pgcPrincipal, True);
    ControlarIndiceTab(pgcPrincipal, 0);
    EstadoDoCadastro := ecNenhumm;
    LimparEdits;
end;

                        //BOTÃO FECHAR
procedure TfrmTelaHeranca.btnFecharClick(Sender: TObject);
begin
  close;
end;

                        //BOTÃO GRAVAR
procedure TfrmTelaHeranca.btnGravarClick(Sender: TObject);
begin
  if (ExisteCampoObrigatorio) then
      abort;

    Try
      if Gravar (EstadoDoCadastro) then  //MÉTODO DE HERANÇA
      begin
        ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar, btnApagar,
                        btnNavigator, pgcPrincipal, True);
        ControlarIndiceTab(pgcPrincipal, 0);
        EstadoDoCadastro := ecNenhumm;
        LimparEdits;
        qryListagem.Refresh;
      end
      else
      begin
        MessageDlg('ERRO na Gravação', mtError, [mbOK], 0);
      end;

    Finally

    End;
end;
                      // BOTÃO APAGAR
procedure TfrmTelaHeranca.btnApagarClick(Sender: TObject);
begin
  Try

    if Apagar then
      begin
        ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar, btnApagar,
                        btnNavigator, pgcPrincipal, True);
        ControlarIndiceTab(pgcPrincipal, 0);
        LimparEdits;
        qryListagem.Refresh;

      end
    else
      begin
        MessageDlg('ERRO na Exclusão', mtError,[mbOK], 0);
      end;
  Finally
        EstadoDoCadastro := ecNenhumm;
  End;
end;

{$endregion}

                        //conexão BD
procedure TfrmTelaHeranca.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  qryListagem.Close;
end;

procedure TfrmTelaHeranca.FormCreate(Sender: TObject);
begin
  qryListagem.Connection:= dtmConexao.ConexaoDB;
  dtsListagem.DataSet:= qryListagem;
  grdListagem.DataSource:= dtsListagem;
  grdListagem.Options:= [dgTitles,dgIndicator,dgColumnResize,dgColLines,
                         dgRowLines,dgTabs,dgRowSelect,dgAlwaysShowSelection,dgCancelOnExit,
                         dgTitleClick,dgTitleHotTrack];
end;

procedure TfrmTelaHeranca.FormShow(Sender: TObject);
begin
    if (qryListagem.SQL.Text <> '') then
      begin
        qryListagem.IndexFieldNames := IndiceAtual;
        ExibirLabelIndice(IndiceAtual, lblIndice);
        qryListagem.Open;
      end;
      ControlarIndiceTab(pgcPrincipal, 0);
      DesabilitarEditPK;
      ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar, btnApagar,
                      btnNavigator, pgcPrincipal, True);

end;

procedure TfrmTelaHeranca.grdListagemDblClick(Sender: TObject);
begin
   btnAlterar.Click;
end;

procedure TfrmTelaHeranca.grdListagemTitleClick(Column: TColumn);
begin
  IndiceAtual := Column.FieldName;
  qryListagem.IndexFieldNames := IndiceAtual;
  ExibirLabelIndice(IndiceAtual, lblIndice);
end;

procedure TfrmTelaHeranca.mskPesquisarChange(Sender: TObject);
begin
    qryListagem.Locate(IndiceAtual, TMaskEdit(Sender).Text, [loPartialKey]);
end;

end.
